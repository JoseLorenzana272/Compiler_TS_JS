/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Lexico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,26],$V2=[1,28],$V3=[1,29],$V4=[1,23],$V5=[1,27],$V6=[1,22],$V7=[1,19],$V8=[1,20],$V9=[1,24],$Va=[1,25],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[5,7,24,25,26,27,29,35,72,76,77,79,82,83,84,89,90,91,92,93,94],$Vi=[1,48],$Vj=[1,53],$Vk=[1,39],$Vl=[1,40],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,71],$Vz=[31,35,36],$VA=[1,80],$VB=[1,79],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[9,31,37,41,42,43,44,45,46,48,49,63,64,65,66,67,68,69,70,73],$VP=[9,38,41],$VQ=[1,162],$VR=[31,37,41],$VS=[5,7,24,25,26,27,29,35,72,76,77,78,79,82,83,84,89,90,91,92,93,94],$VT=[9,31,37,41,42,43,48,49,63,64,65,66,67,68,69,70,73],$VU=[9,31,37,41,42,43,44,45,48,49,63,64,65,66,67,68,69,70,73],$VV=[9,31,37,41,48,49,63,64,65,66,67,68,69,70,73],$VW=[9,31,37,41,49,69,70,73],$VX=[31,41],$VY=[1,209],$VZ=[1,210],$V_=[76,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"EXEC":7,"expresion":8,"PYC":9,"fn_print":10,"fn_if":11,"dec_var":12,"set_var":13,"incremento":14,"fn_dowhile":15,"fn_switch":16,"fn_for":17,"break_instruccion":18,"fn_while":19,"continue_instruccion":20,"return_instruccion":21,"funcion":22,"call_funcion":23,"BREAK":24,"CONTINUE":25,"RETURN":26,"DO":27,"bloque":28,"WHILE":29,"PARIZQ":30,"PARDER":31,"tipo":32,"lista_id":33,"var_assig":34,"ID":35,"CORCHIZQ":36,"CORCHDER":37,"ASIGNACION":38,"NEW":39,"list_expresion":40,"COMA":41,"RES":42,"MAS":43,"MUL":44,"DIV":45,"MOD":46,"POW":47,"TERNARIO":48,"DOSPUNTOS":49,"relacionales":50,"logicos":51,"NUMBER_A":52,"DOUBLE_A":53,"TRUE":54,"FALSE":55,"CADENA":56,"TOLOWER":57,"TOUPPER":58,"ROUND":59,"TOSTRING":60,"TYPEOF":61,"CARACTER":62,"IGUAL":63,"DISTINTO":64,"MENOR":65,"MENORIGUAL":66,"MAYOR":67,"MAYORIGUAL":68,"AND":69,"OR":70,"NOT":71,"COUT":72,"CONCATENAR":73,"ENDL":74,"LLAVEIZQ":75,"LLAVEDER":76,"IF":77,"ELSE":78,"SWITCH":79,"cases":80,"case_div":81,"CASE":82,"DEFAULT":83,"FOR":84,"dec_for":85,"actualizacion_for":86,"parametros":87,"parametro":88,"NUMBER":89,"DOUBLE":90,"STRING":91,"BOOLEAN":92,"CHAR":93,"VOID":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"EXEC",9:"PYC",24:"BREAK",25:"CONTINUE",26:"RETURN",27:"DO",29:"WHILE",30:"PARIZQ",31:"PARDER",35:"ID",36:"CORCHIZQ",37:"CORCHDER",38:"ASIGNACION",39:"NEW",41:"COMA",42:"RES",43:"MAS",44:"MUL",45:"DIV",46:"MOD",47:"POW",48:"TERNARIO",49:"DOSPUNTOS",52:"NUMBER_A",53:"DOUBLE_A",54:"TRUE",55:"FALSE",56:"CADENA",57:"TOLOWER",58:"TOUPPER",59:"ROUND",60:"TOSTRING",61:"TYPEOF",62:"CARACTER",63:"IGUAL",64:"DISTINTO",65:"MENOR",66:"MENORIGUAL",67:"MAYOR",68:"MAYORIGUAL",69:"AND",70:"OR",71:"NOT",72:"COUT",73:"CONCATENAR",74:"ENDL",75:"LLAVEIZQ",76:"LLAVEDER",77:"IF",78:"ELSE",79:"SWITCH",82:"CASE",83:"DEFAULT",84:"FOR",89:"NUMBER",90:"DOUBLE",91:"STRING",92:"BOOLEAN",93:"CHAR",94:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[18,2],[20,2],[21,3],[15,6],[12,3],[12,10],[12,8],[33,3],[33,1],[34,2],[34,6],[34,4],[34,0],[13,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,6],[8,5],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,4],[8,4],[8,4],[8,4],[8,1],[8,4],[8,1],[8,4],[8,3],[8,4],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[51,3],[51,3],[51,2],[14,3],[14,3],[10,3],[10,5],[28,3],[28,2],[11,5],[11,7],[11,7],[16,7],[80,2],[80,1],[81,4],[81,3],[17,9],[85,4],[85,3],[86,3],[86,3],[86,3],[19,5],[22,6],[22,5],[87,3],[87,1],[88,2],[23,5],[23,4],[40,3],[40,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4:
 this.$ =  $$[$0-1];
break;
case 5: case 7: case 8: case 9: case 10: case 48:
 this.$ = $$[$0-1];
break;
case 6: case 11: case 12: case 28: case 41: case 42:
 this.$ = $$[$0];
break;
case 13: case 14: case 15: case 16: case 17: case 18: case 93:
 this.$ = $$[$0]; 
break;
case 19:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 20:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 21:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 22:
 this.$ = new FN_DO_WHILE($$[$0-1],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 23:
this.$ = new VarDecla($$[$0-1],$$[$0-2],$$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 24:
 this.$ = new DeclaraArreglo($$[$0-8], $$[$0-9], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 25:
 this.$ = new DeclaraArregloLiteral($$[$0-6], $$[$0-7], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 26: case 91: case 96:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 27: case 79: case 92: case 97:
 this.$ = [$$[$0]];
break;
case 29:
 this.$ = new CrearArreglo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 30:
 this.$ = new CrearArregloLiteral($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 31:
 this.$ = null;
break;
case 32: case 84: case 87:
 this.$ = new SetVar($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 33:
 this.$ = new Aritmetica($$[$0],$$[$0],OpAritmetica.UMINUS,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 34:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 35:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 40:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 43:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,_$[$0].first_line,_$[$0].first_column); 
break;
case 44:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,_$[$0].first_line,_$[$0].first_column); 
break;
case 45: case 46:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,_$[$0].first_line,_$[$0].first_column); 
break;
case 47:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,_$[$0].first_line,_$[$0].first_column); 
break;
case 49:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 50:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 51:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 52:
 this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 53:
 this.$ = new idValue($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 54:
 this.$ = new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 55:
 this.$ = new Primitivo($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column); 
break;
case 56:
 this.$ = new CallReturn($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 57:
 this.$ = new CallReturn($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new Casteo($$[$0],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 59:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 60:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 62:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 63:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 64:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 65:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 66:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 67:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 68:
this.$ = new Incremento($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 69:
this.$ = new Incremento($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 70:
 this.$ = new Print($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 71:
 this.$ = new Print($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 72:
 this.$= new Bloque($$[$0-1]);
break;
case 73:
 this.$ = new Bloque([]) 
break;
case 74:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 75: case 76:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 77:
 this.$ = new FN_SWITCH($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 78:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 80:
 this.$ = new FN_CASE($$[$0-2], $$[$0], _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 81:
 this.$ = new FN_CASE(null, $$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
 this.$ = new FN_FOR($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 83:
 this.$ = new VarDecla([$$[$0-2]],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 85:
 this.$ = new Incremento($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 86:
 this.$ = new Incremento($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
 this.$ = new FN_WHILE($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 89:
 this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 90:
 this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 94:
 this.$ = new CallVoid($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 95:
 this.$ = new CallVoid($$[$0-3],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 98:
 this.$ = TipoDato.NUMBER;
break;
case 99:
 this.$ = TipoDato.DOUBLE;
break;
case 100:
 this.$ = TipoDato.STRING;
break;
case 101:
 this.$ = TipoDato.BOOLEANO;
break;
case 102:
 this.$ = TipoDato.CHAR;
break;
case 103:
 this.$ = $$[$0]
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{1:[3]},{5:[1,36],6:37,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},o($Vh,[2,3]),{8:38,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{9:[1,57]},o($Vh,[2,6]),{9:[1,58]},{9:[1,59]},{9:[1,60]},{9:[1,61]},o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{73:[1,62]},{30:[1,63]},{33:64,35:[1,65]},{30:[1,69],38:[1,66],42:[1,68],43:[1,67]},{28:70,75:$Vy},{30:[1,72]},{30:[1,73]},{9:[1,74]},{30:[1,75]},{9:[1,76]},{8:77,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($Vz,[2,98]),o($Vz,[2,99]),o($Vz,[2,100]),o($Vz,[2,101]),o($Vz,[2,102]),o($Vz,[2,103]),{1:[2,1]},o($Vh,[2,2]),{9:[1,78],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{8:93,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{30:[1,94]},o($VO,[2,41]),o($VO,[2,42]),o($VO,[2,43]),o($VO,[2,44]),o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),{8:95,30:$Vi,32:96,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{30:[1,97]},{30:[1,98]},{30:[1,99]},{30:[1,100]},o($VO,[2,53],{30:[1,101]}),{30:[1,102]},o($VO,[2,55]),{8:103,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($Vh,[2,5]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),{8:104,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:105,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{9:[2,31],34:106,38:[1,108],41:[1,107]},o($VP,[2,27],{30:[1,110],36:[1,109]}),{8:111,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{43:[1,112]},{42:[1,113]},{8:116,30:$Vi,31:[1,115],35:$Vj,40:114,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{29:[1,117]},{4:118,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,76:[1,119],77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{8:120,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{32:122,35:[1,123],85:121,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},o($Vh,[2,19]),{8:124,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($Vh,[2,20]),{9:[1,125],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($Vh,[2,4]),{8:126,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:127,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:128,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:129,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:130,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:131,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:132,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:133,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:134,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:135,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:136,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:137,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:138,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:139,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($VO,[2,33]),{8:140,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{31:[1,141],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{31:[1,142]},{8:143,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:144,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:145,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:146,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:116,30:$Vi,31:[1,148],35:$Vj,40:147,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:149,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o([9,31,37,41,49,73],[2,67],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN}),{9:[2,70],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,73:[1,150]},{31:[1,151],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{9:[2,23]},{35:[1,152]},{8:153,30:$Vi,35:$Vj,36:[1,155],39:[1,154],42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{37:[1,156]},{31:[1,158],32:160,87:157,88:159,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{9:[2,32],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{9:[2,68]},{9:[2,69]},{31:[1,161],41:$VQ},{9:[1,163]},o($VR,[2,97],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN}),{30:[1,164]},{6:37,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,76:[1,165],77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},o($VS,[2,73]),{31:[1,166],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{9:[1,167]},{35:[1,168]},{38:[1,169]},{31:[1,170],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($Vh,[2,21]),o($VT,[2,34],{44:$VC,45:$VD,46:$VE}),o($VT,[2,35],{44:$VC,45:$VD,46:$VE}),o($VU,[2,36],{46:$VE}),o($VU,[2,37],{46:$VE}),o($VO,[2,38]),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,49:[1,171],63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($VV,[2,59],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VV,[2,60],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VV,[2,61],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VV,[2,62],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VV,[2,63],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VV,[2,64],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VW,[2,65],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o([9,31,37,41,49,70,73],[2,66],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),{41:[1,172],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($VO,[2,48]),{8:173,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{31:[1,174],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{31:[1,175],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{31:[1,176],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{31:[1,177],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{31:[1,178],41:$VQ},o($VO,[2,57]),{31:[1,179],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{74:[1,180]},{28:181,75:$Vy},o($VP,[2,26]),{9:[2,28],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{32:182,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{8:116,30:$Vi,35:$Vj,40:183,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{38:[1,184]},{31:[1,185],41:[1,186]},{28:187,75:$Vy},o($VX,[2,92]),{35:[1,188]},{9:[1,189]},{8:190,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($Vh,[2,95]),{8:191,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($VS,[2,72]),{75:[1,192]},{8:193,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{38:[1,194]},{8:195,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{28:196,75:$Vy},{8:197,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{8:198,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($VO,[2,58]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,56]),o($VO,[2,54]),{9:[2,71]},o($Vh,[2,74],{78:[1,199]}),{36:[1,200]},{37:[1,201],41:$VQ},{36:[1,203],39:[1,202]},{28:204,75:$Vy},{32:160,88:205,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},o($Vh,[2,90]),o($VX,[2,93]),o($Vh,[2,94]),o($VR,[2,96],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN}),{31:[1,206],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{80:207,81:208,82:$VY,83:$VZ},{9:[1,211],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{8:212,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{9:[2,84],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($Vh,[2,88]),o($VW,[2,40],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),{31:[1,213],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{11:215,28:214,75:$Vy,77:$V8},{8:216,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{9:[2,30]},{32:217,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{8:116,30:$Vi,35:$Vj,40:218,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},o($Vh,[2,89]),o($VX,[2,91]),{9:[2,22]},{76:[1,219],81:220,82:$VY,83:$VZ},o($V_,[2,79]),{8:221,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{49:[1,222]},{35:[1,224],86:223},{9:[2,83],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($VO,[2,39]),o($Vh,[2,75]),o($Vh,[2,76]),{37:[1,225],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{36:[1,226]},{37:[1,227],41:$VQ},o($Vh,[2,77]),o($V_,[2,78]),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,49:[1,228],63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{4:229,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},{31:[1,230]},{38:[1,233],42:[1,232],43:[1,231]},{9:[2,29]},{8:234,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{9:[2,25]},{4:235,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,32:21,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg},o($V_,[2,81],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,32:21,6:37,7:$V0,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg}),{28:236,75:$Vy},{43:[1,237]},{42:[1,238]},{8:239,30:$Vi,35:$Vj,42:$Vk,47:$Vl,50:41,51:42,52:$Vm,53:$Vn,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,71:$Vx},{37:[1,240],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},o($V_,[2,80],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,32:21,6:37,7:$V0,24:$V1,25:$V2,26:$V3,27:$V4,29:$V5,35:$V6,72:$V7,77:$V8,79:$V9,84:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg}),o($Vh,[2,82]),{31:[2,85]},{31:[2,86]},{31:[2,87],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,48:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN},{9:[2,24]}],
defaultActions: {36:[2,1],106:[2,23],112:[2,68],113:[2,69],180:[2,71],201:[2,30],206:[2,22],225:[2,29],227:[2,25],237:[2,85],238:[2,86],240:[2,24]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../js/Expresion/Aritmetica");
    const {Relacional} = require("../js/Expresion/Relacionales");
    const {Logico} = require("../js/Expresion/Logicos");
    const {Primitivo} = require("../js/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../js/Expresion/Resultado");
    const {Print} = require("../js/instruccion/Print");
    const {Bloque} = require("../js/instruccion/Bloque");
    const {FN_IF} = require("../js/instruccion/Control/IF");
    const {AST} = require("../js/AST");
    const {Ternario} = require("../js/Expresion/Ternario");
    const {ToLower} = require("../js/Expresion/ToLower");
        const {Round} = require("../js/Expresion/Round");
        const {ToUpper} = require("../js/Expresion/ToUpper");
        const {ToString} = require("../js/Expresion/toString");
        const {VarDecla} = require("../js/instruccion/VarDecla");
        const {idValue} = require("../js/Expresion/idValue");
        const {Incremento} = require("../js/instruccion/Incremento");
        const {FN_DO_WHILE} = require("../js/instruccion/Control/DoWhile");
        const {FN_SWITCH} = require("../js/instruccion/Control/Switch");
        const {TypeOf} = require("../js/Expresion/TypeOf");
        const {FN_CASE} = require("../js/instruccion/Control/Case");
        const {Break} = require("../js/instruccion/Break");
        const {SetVar} = require("../js/instruccion/SetVar");
        const {FN_FOR} = require("../js/instruccion/Control/For");
        const {FN_WHILE} = require("../js/instruccion/Control/While");
        const {Continue} = require("../js/instruccion/Continue");
        const {Return} = require("../js/instruccion/Return");
        const {Function} = require("../js/instruccion/Function");
        const {CallVoid} = require("../js/instruccion/CallVoid");
        const {CallReturn} = require("../js/Expresion/CallReturn");
        const {Casteo} = require("../js/Expresion/casteos");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:   
break;
case 2:return 53;
break;
case 3:return 52;
break;
case 4:return 94;
break;
case 5:return 7;
break;
case 6:return 72;
break;
case 7:return 74;
break;
case 8:return 73;
break;
case 9:return 54;
break;
case 10:return 55;
break;
case 11:return 39;
break;
case 12:return 77;
break;
case 13:return 78;
break;
case 14:return 75;
break;
case 15:return 76;
break;
case 16:return 49;
break;
case 17:return 30;
break;
case 18:return 31;
break;
case 19:return 36;
break;
case 20:return 37;
break;
case 21:return 43;
break;
case 22:return 42;
break;
case 23:return 44;
break;
case 24:return 45;
break;
case 25:return 47;
break;
case 26:return 46;
break;
case 27:return 9;
break;
case 28:return 41;
break;
case 29:return 48;
break;
case 30:return 63;
break;
case 31:return 64;
break;
case 32:return 66;
break;
case 33:return 65;
break;
case 34:return 68;
break;
case 35:return 67;
break;
case 36:return 38;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 71;
break;
case 40:return 89;
break;
case 41:return 90;
break;
case 42:return 91;
break;
case 43:return 92;
break;
case 44:return 93;
break;
case 45:return 57;
break;
case 46:return 58;
break;
case 47:return 59;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 'DMAS';
break;
case 51:return 'DMENOS';
break;
case 52:return 27;
break;
case 53:return 29;
break;
case 54:return 79;
break;
case 55:return 82;
break;
case 56:return 83;
break;
case 57:return 24;
break;
case 58:return 25;
break;
case 59:return 26;
break;
case 60:return 84;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 62: this.begin("character"); 
break;
case 63: return 62;
break;
case 64: return 62; 
break;
case 65: this.popState(); 
break;
case 66:return 35;
break;
case 67:return 5;
break;
case 68:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:void\b)/i,/^(?:EXEC\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:std::string\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:std::toString\b)/i,/^(?:typeof\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:"[^\"]*")/i,/^(?:['])/i,/^(?:\\x[0-9a-fA-F]{2})/i,/^(?:[^\\\'])/i,/^(?:')/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"character":{"rules":[63,64,65],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Lexico;
exports.Parser = Lexico.Parser;
exports.parse = function () { return Lexico.parse.apply(Lexico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}