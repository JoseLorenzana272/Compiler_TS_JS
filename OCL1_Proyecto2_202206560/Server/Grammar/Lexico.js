/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Lexico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,15],$V3=[1,18],$V4=[1,19],$V5=[1,12],$V6=[1,13],$V7=[1,17],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[5,7,17,26,38,39,57,61,62,64,68,69,70,71,72],$Vc=[1,35],$Vd=[1,40],$Ve=[1,26],$Vf=[1,27],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,41],$Vq=[1,42],$Vr=[1,57],$Vs=[1,61],$Vt=[1,60],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[9,21,25,28,29,30,31,32,34,35,48,49,50,51,52,53,54,55,58],$VH=[9,25,27],$VI=[5,7,17,19,26,38,39,57,61,62,63,64,68,69,70,71,72],$VJ=[9,21,25,28,29,34,35,48,49,50,51,52,53,54,55,58],$VK=[9,21,25,28,29,30,31,34,35,48,49,50,51,52,53,54,55,58],$VL=[9,21,25,34,35,48,49,50,51,52,53,54,55,58],$VM=[9,21,25,35,54,55,58],$VN=[1,140],$VO=[61,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"EXEC":7,"expresion":8,"PYC":9,"fn_print":10,"fn_if":11,"dec_var":12,"set_var":13,"incremento":14,"fn_dowhile":15,"fn_switch":16,"DO":17,"bloque":18,"WHILE":19,"PARIZQ":20,"PARDER":21,"tipo":22,"lista_id":23,"var_assig":24,"COMA":25,"ID":26,"ASIGNACION":27,"RES":28,"MAS":29,"MUL":30,"DIV":31,"MOD":32,"POW":33,"TERNARIO":34,"DOSPUNTOS":35,"relacionales":36,"logicos":37,"NUMBER":38,"DOUBLE":39,"TRUE":40,"FALSE":41,"CADENA":42,"TOLOWER":43,"TOUPPER":44,"ROUND":45,"TOSTRING":46,"TYPEOF":47,"IGUAL":48,"DISTINTO":49,"MENOR":50,"MENORIGUAL":51,"MAYOR":52,"MAYORIGUAL":53,"AND":54,"OR":55,"NOT":56,"COUT":57,"CONCATENAR":58,"ENDL":59,"LLAVEIZQ":60,"LLAVEDER":61,"IF":62,"ELSE":63,"SWITCH":64,"cases":65,"default_div":66,"case_div":67,"CASE":68,"DEFAULT":69,"STRING":70,"BOOLEAN":71,"CHAR":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"EXEC",9:"PYC",17:"DO",19:"WHILE",20:"PARIZQ",21:"PARDER",25:"COMA",26:"ID",27:"ASIGNACION",28:"RES",29:"MAS",30:"MUL",31:"DIV",32:"MOD",33:"POW",34:"TERNARIO",35:"DOSPUNTOS",38:"NUMBER",39:"DOUBLE",40:"TRUE",41:"FALSE",42:"CADENA",43:"TOLOWER",44:"TOUPPER",45:"ROUND",46:"TOSTRING",47:"TYPEOF",48:"IGUAL",49:"DISTINTO",50:"MENOR",51:"MENORIGUAL",52:"MAYOR",53:"MAYORIGUAL",54:"AND",55:"OR",56:"NOT",57:"COUT",58:"CONCATENAR",59:"ENDL",60:"LLAVEIZQ",61:"LLAVEDER",62:"IF",63:"ELSE",64:"SWITCH",68:"CASE",69:"DEFAULT",70:"STRING",71:"BOOLEAN",72:"CHAR"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[15,6],[12,3],[23,3],[23,1],[24,2],[24,0],[13,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,6],[8,5],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,4],[8,4],[8,4],[8,4],[8,1],[8,4],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[37,3],[37,3],[37,2],[14,3],[14,3],[10,3],[10,5],[18,3],[18,2],[11,5],[11,7],[11,7],[16,7],[16,8],[65,2],[65,1],[67,4],[66,3],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4:
 this.$ =  $$[$0-1];
break;
case 5: case 7: case 8: case 9: case 10: case 11: case 34:
 this.$ = $$[$0-1];
break;
case 6: case 16: case 27: case 28:
 this.$ = $$[$0];
break;
case 12:
 this.$ = new FN_DO_WHILE($$[$0-1],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 13:
this.$ = new VarDecla($$[$0-1],$$[$0-2],$$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 14:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 15: case 62:
 this.$ = [$$[$0]];
break;
case 17:
 this.$ = null;
break;
case 18:
 this.$ = new SetVar($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 19:
 this.$ = new Aritmetica(new Primitivo(_$[$0-1].first_line,_$[$0-1].first_column,0),$$[$0],OpAritmetica.RESTA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 20:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 22:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 23:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 24:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 26:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 29:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,_$[$0].first_line,_$[$0].first_column); 
break;
case 30:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,_$[$0].first_line,_$[$0].first_column); 
break;
case 31: case 32:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,_$[$0].first_line,_$[$0].first_column); 
break;
case 33:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,_$[$0].first_line,_$[$0].first_column); 
break;
case 35:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 36:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 37:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 38:
 this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 39:
 this.$ = new idValue($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 40:
 this.$ = new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 41:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 42:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 43:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 44:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 45:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 46:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 47:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 50:
this.$ = new Incremento($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$ = new Incremento($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52:
 this.$ = new Print($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 53:
 this.$ = new Print($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 54:
 this.$= new Bloque($$[$0-1]);
break;
case 55:
 this.$ = new Bloque([]) 
break;
case 56:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 57: case 58:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 59:
 this.$ = new FN_SWITCH($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 60:
 this.$ = new FN_SWITCH($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 61:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 63:
 this.$ = {case: $$[$0-2], instrucciones: $$[$0]};
break;
case 64:
 this.$ = {case: "default", instrucciones: $$[$0]};
break;
case 65:
 this.$ = TipoDato.NUMBER;
break;
case 66:
 this.$ = TipoDato.DOUBLE;
break;
case 67:
 this.$ = TipoDato.STRING;
break;
case 68:
 this.$ = TipoDato.BOOLEANO;
break;
case 69:
 this.$ = TipoDato.CHAR;
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},{1:[3]},{5:[1,23],6:24,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},o($Vb,[2,3]),{8:25,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{9:[1,43]},o($Vb,[2,6]),{9:[1,44]},{9:[1,45]},{9:[1,46]},{9:[1,47]},{9:[1,48]},{58:[1,49]},{20:[1,50]},{23:51,26:[1,52]},{27:[1,53],28:[1,55],29:[1,54]},{18:56,60:$Vr},{20:[1,58]},{26:[2,65]},{26:[2,66]},{26:[2,67]},{26:[2,68]},{26:[2,69]},{1:[2,1]},o($Vb,[2,2]),{9:[1,59],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{8:74,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{20:[1,75]},o($VG,[2,27]),o($VG,[2,28]),o($VG,[2,29]),o($VG,[2,30]),o($VG,[2,31]),o($VG,[2,32]),o($VG,[2,33]),{8:76,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{20:[1,77]},{20:[1,78]},{20:[1,79]},{20:[1,80]},o($VG,[2,39]),{20:[1,81]},{8:82,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($Vb,[2,5]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),{8:83,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:84,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{9:[2,17],24:85,25:[1,86],27:[1,87]},o($VH,[2,15]),{8:88,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{29:[1,89]},{28:[1,90]},{19:[1,91]},{4:92,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,61:[1,93],62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},{8:94,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($Vb,[2,4]),{8:95,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:96,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:97,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:98,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:99,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:100,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:101,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:102,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:103,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:104,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:105,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:106,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:107,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:108,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($VG,[2,19]),{8:109,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{21:[1,110],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{8:111,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:112,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:113,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:114,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:115,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o([9,21,25,35,58],[2,49],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF}),{9:[2,52],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,58:[1,116]},{21:[1,117],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{9:[2,13]},{26:[1,118]},{8:119,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{9:[2,18],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{9:[2,50]},{9:[2,51]},{20:[1,120]},{6:24,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,61:[1,121],62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},o($VI,[2,55]),{21:[1,122],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},o($VJ,[2,20],{30:$Vu,31:$Vv,32:$Vw}),o($VJ,[2,21],{30:$Vu,31:$Vv,32:$Vw}),o($VK,[2,22],{32:$Vw}),o($VK,[2,23],{32:$Vw}),o($VG,[2,24]),{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,35:[1,123],48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},o($VL,[2,41],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VL,[2,42],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VL,[2,43],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VL,[2,44],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VL,[2,45],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VL,[2,46],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VM,[2,47],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),o([9,21,25,35,55,58],[2,48],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE}),{25:[1,124],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},o($VG,[2,34]),{21:[1,125],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{21:[1,126],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{21:[1,127],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{21:[1,128],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{21:[1,129],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{59:[1,130]},{18:131,60:$Vr},o($VH,[2,14]),{9:[2,16],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{8:132,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($VI,[2,54]),{60:[1,133]},{8:134,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},{8:135,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($VG,[2,35]),o($VG,[2,36]),o($VG,[2,37]),o($VG,[2,38]),o($VG,[2,40]),{9:[2,53]},o($Vb,[2,56],{63:[1,136]}),{21:[1,137],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{65:138,67:139,68:$VN},o($VM,[2,26],{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),{21:[1,141],28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{11:143,18:142,60:$Vr,62:$V6},{9:[2,12]},{61:[1,144],66:145,67:146,68:$VN,69:[1,147]},o($VO,[2,62]),{8:148,20:$Vc,26:$Vd,28:$Ve,33:$Vf,36:28,37:29,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,56:$Vq},o($VG,[2,25]),o($Vb,[2,57]),o($Vb,[2,58]),{9:[2,59]},{61:[1,149]},o($VO,[2,61]),{35:[1,150]},{28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,34:$Vx,35:[1,151],48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF},{9:[2,60]},{4:152,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},{4:153,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},{6:24,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V1,22:14,26:$V2,38:$V3,39:$V4,57:$V5,61:[2,64],62:$V6,64:$V7,70:$V8,71:$V9,72:$Va},o($VO,[2,63],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,22:14,6:24,7:$V0,17:$V1,26:$V2,38:$V3,39:$V4,57:$V5,62:$V6,64:$V7,70:$V8,71:$V9,72:$Va})],
defaultActions: {18:[2,65],19:[2,66],20:[2,67],21:[2,68],22:[2,69],23:[2,1],85:[2,13],89:[2,50],90:[2,51],130:[2,53],137:[2,12],144:[2,59],149:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../js/Expresion/Aritmetica");
    const {Relacional} = require("../js/Expresion/Relacionales");
    const {Logico} = require("../js/Expresion/Logicos");
    const {Primitivo} = require("../js/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../js/Expresion/Resultado");
    const {Print} = require("../js/instruccion/Print");
    const {Bloque} = require("../js/instruccion/Bloque");
    const {FN_IF} = require("../js/instruccion/Control/IF");
    const {AST} = require("../js/AST");
    const {Ternario} = require("../js/Expresion/Ternario");
    const {ToLower} = require("../js/Expresion/ToLower");
        const {Round} = require("../js/Expresion/Round");
        const {ToUpper} = require("../js/Expresion/ToUpper");
        const {ToString} = require("../js/Expresion/toString");
        const {VarDecla} = require("../js/instruccion/VarDecla");
        const {idValue} = require("../js/Expresion/idValue");
        const {Incremento} = require("../js/instruccion/Incremento");
        const {FN_DO_WHILE} = require("../js/instruccion/Control/DoWhile");
        const {FN_SWITCH} = require("../js/instruccion/Control/Switch");
        const {TypeOf} = require("../js/Expresion/TypeOf");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 39;
break;
case 2:return 38;
break;
case 3:return 7;
break;
case 4:return 57;
break;
case 5:return 59;
break;
case 6:return 58;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 62;
break;
case 10:return 63;
break;
case 11:return 60;
break;
case 12:return 61;
break;
case 13:return 35;
break;
case 14:return 20;
break;
case 15:return 21;
break;
case 16:return 29;
break;
case 17:return 28;
break;
case 18:return 30;
break;
case 19:return 31;
break;
case 20:return 33;
break;
case 21:return 32;
break;
case 22:return 9;
break;
case 23:return 25;
break;
case 24:return 34;
break;
case 25:return 48;
break;
case 26:return 49;
break;
case 27:return 51;
break;
case 28:return 50;
break;
case 29:return 53;
break;
case 30:return 52;
break;
case 31:return 27;
break;
case 32:return 54;
break;
case 33:return 55;
break;
case 34:return 56;
break;
case 35:return 38;
break;
case 36:return 39;
break;
case 37:return 70;
break;
case 38:return 71;
break;
case 39:return 72;
break;
case 40:return 43;
break;
case 41:return 44;
break;
case 42:return 45;
break;
case 43:return 46;
break;
case 44:return 47;
break;
case 45:return 'DMAS';
break;
case 46:return 'DMENOS';
break;
case 47:return 17;
break;
case 48:return 19;
break;
case 49:return 64;
break;
case 50:return 68;
break;
case 51:return 69;
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 42; 
break;
case 53:return 26;
break;
case 54:return 5;
break;
case 55:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:EXEC\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:std::string\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:std::toString\b)/i,/^(?:typeof\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:"[^\"]*")/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Lexico;
exports.Parser = Lexico.Parser;
exports.parse = function () { return Lexico.parse.apply(Lexico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}