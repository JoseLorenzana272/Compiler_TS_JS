/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Lexico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,28],$V2=[1,29],$V3=[1,23],$V4=[1,27],$V5=[1,30],$V6=[1,22],$V7=[1,19],$V8=[1,20],$V9=[1,24],$Va=[1,25],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[5,23,24,25,27,29,32,36,75,79,80,82,85,86,87,92,93,94,95,96,97],$Vi=[1,51],$Vj=[1,53],$Vk=[1,69],$Vl=[1,74],$Vm=[1,60],$Vn=[1,61],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[31,36,37],$VB=[8,39,42],$VC=[1,103],$VD=[1,102],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[8,31,38,42,43,44,45,46,47,49,50,64,66,67,68,69,70,71,72,73,76],$VS=[1,140],$VT=[31,38,42],$VU=[5,23,24,25,27,29,32,36,75,79,80,81,82,85,86,87,92,93,94,95,96,97],$VV=[31,42],$VW=[8,31,38,42,43,44,49,50,64,66,67,68,69,70,71,72,73,76],$VX=[8,31,38,42,49,50,64,66,67,68,69,70,71,72,73,76],$VY=[1,211],$VZ=[1,212],$V_=[8,31,38,42,50,64,76],$V$=[79,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"fn_print":7,"PYC":8,"fn_if":9,"dec_var":10,"set_var":11,"incremento":12,"fn_dowhile":13,"fn_switch":14,"fn_for":15,"break_instruccion":16,"fn_while":17,"continue_instruccion":18,"return_instruccion":19,"funcion":20,"call_funcion":21,"execute":22,"BREAK":23,"CONTINUE":24,"RETURN":25,"expresion":26,"DO":27,"bloque":28,"WHILE":29,"PARIZQ":30,"PARDER":31,"EXEC":32,"tipo":33,"lista_id":34,"var_assig":35,"ID":36,"CORCHIZQ":37,"CORCHDER":38,"ASIGNACION":39,"NEW":40,"list_expresion":41,"COMA":42,"RES":43,"MAS":44,"MUL":45,"DIV":46,"MOD":47,"POW":48,"TERNARIO":49,"DOSPUNTOS":50,"relacionales":51,"logicos":52,"NUMBER_A":53,"DOUBLE_A":54,"TRUE":55,"FALSE":56,"CADENA":57,"TOLOWER":58,"TOUPPER":59,"ROUND":60,"TOSTRING":61,"TYPEOF":62,"CARACTER":63,"PUNTO":64,"LENGTH":65,"IGUAL":66,"DISTINTO":67,"MENOR":68,"MENORIGUAL":69,"MAYOR":70,"MAYORIGUAL":71,"AND":72,"OR":73,"NOT":74,"COUT":75,"CONCATENAR":76,"ENDL":77,"LLAVEIZQ":78,"LLAVEDER":79,"IF":80,"ELSE":81,"SWITCH":82,"cases":83,"case_div":84,"CASE":85,"DEFAULT":86,"FOR":87,"dec_for":88,"actualizacion_for":89,"parametros":90,"parametro":91,"NUMBER":92,"DOUBLE":93,"STRING":94,"BOOLEAN":95,"CHAR":96,"VOID":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",23:"BREAK",24:"CONTINUE",25:"RETURN",27:"DO",29:"WHILE",30:"PARIZQ",31:"PARDER",32:"EXEC",36:"ID",37:"CORCHIZQ",38:"CORCHDER",39:"ASIGNACION",40:"NEW",42:"COMA",43:"RES",44:"MAS",45:"MUL",46:"DIV",47:"MOD",48:"POW",49:"TERNARIO",50:"DOSPUNTOS",53:"NUMBER_A",54:"DOUBLE_A",55:"TRUE",56:"FALSE",57:"CADENA",58:"TOLOWER",59:"TOUPPER",60:"ROUND",61:"TOSTRING",62:"TYPEOF",63:"CARACTER",64:"PUNTO",65:"LENGTH",66:"IGUAL",67:"DISTINTO",68:"MENOR",69:"MENORIGUAL",70:"MAYOR",71:"MAYORIGUAL",72:"AND",73:"OR",74:"NOT",75:"COUT",76:"CONCATENAR",77:"ENDL",78:"LLAVEIZQ",79:"LLAVEDER",80:"IF",81:"ELSE",82:"SWITCH",85:"CASE",86:"DEFAULT",87:"FOR",92:"NUMBER",93:"DOUBLE",94:"STRING",95:"BOOLEAN",96:"CHAR",97:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[16,2],[18,2],[19,3],[13,6],[22,2],[10,3],[10,10],[10,8],[34,3],[34,1],[35,2],[35,6],[35,4],[35,0],[11,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,6],[26,5],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,3],[26,4],[26,4],[26,4],[26,4],[26,1],[26,4],[26,1],[26,4],[26,3],[26,4],[26,5],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[52,3],[52,3],[52,2],[12,3],[12,3],[7,3],[7,5],[28,3],[28,2],[9,5],[9,7],[9,7],[14,7],[83,2],[83,1],[84,4],[84,3],[15,9],[88,4],[88,3],[89,3],[89,3],[89,3],[17,5],[20,6],[20,5],[90,3],[90,1],[91,2],[21,5],[21,4],[41,3],[41,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 49:
 this.$ = $$[$0-1];
break;
case 5: case 10: case 11: case 29: case 42: case 43:
 this.$ = $$[$0];
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 95:
 this.$ = $$[$0]; 
break;
case 19:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 20:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 21:
 this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 22:
 this.$ = new FN_DO_WHILE($$[$0-1],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 23:
 this.$ = new execute($$[$0], _$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 24:
this.$ = new VarDecla($$[$0-1],$$[$0-2],$$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
 this.$ = new DeclaraArreglo($$[$0-8], $$[$0-9], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 26:
 this.$ = new DeclaraArregloLiteral($$[$0-6], $$[$0-7], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 27: case 93: case 98:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 28: case 81: case 94: case 99:
 this.$ = [$$[$0]];
break;
case 30:
 this.$ = new CrearArreglo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 31:
 this.$ = new CrearArregloLiteral($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 32:
 this.$ = null;
break;
case 33: case 86: case 89:
 this.$ = new SetVar($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 34:
 this.$ = new Aritmetica($$[$0],$$[$0],OpAritmetica.UMINUS,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 35:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 41:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 44:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,_$[$0].first_line,_$[$0].first_column); 
break;
case 45:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,_$[$0].first_line,_$[$0].first_column); 
break;
case 46: case 47:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,_$[$0].first_line,_$[$0].first_column); 
break;
case 48:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,_$[$0].first_line,_$[$0].first_column); 
break;
case 50:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 51:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 52:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 53:
 this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 54:
 this.$ = new idValue($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 55:
 this.$ = new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 56:
 this.$ = new Primitivo($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column); 
break;
case 57:
 this.$ = new CallReturn($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 58:
 this.$ = new CallReturn($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 59:
 this.$ = new Casteo($$[$0],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 60:
 this.$ = new lenght($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 61:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 62:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 63:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 64:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 65:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 66:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 67:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 68:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 69:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 70:
this.$ = new Incremento($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$ = new Incremento($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 72:
 this.$ = new Print($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 73:
 this.$ = new Print($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 74:
 this.$= new Bloque($$[$0-1]);
break;
case 75:
 this.$ = new Bloque([]) 
break;
case 76:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 77: case 78:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 79:
 this.$ = new FN_SWITCH($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 80:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 82:
 this.$ = new FN_CASE($$[$0-2], $$[$0], _$[$0-3].first_line,_$[$0-3].first_column);
break;
case 83:
 this.$ = new FN_CASE(null, $$[$0], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 84:
 this.$ = new FN_FOR($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 85:
 this.$ = new VarDecla([$$[$0-2]],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 87:
 this.$ = new Incremento($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
 this.$ = new Incremento($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 90:
 this.$ = new FN_WHILE($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 91:
 this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line,_$[$0-5].first_column);
break;
case 92:
 this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line,_$[$0-4].first_column);
break;
case 96:
 this.$ = new CallVoid($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 97:
 this.$ = new CallVoid($$[$0-3],null,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 100:
 this.$ = TipoDato.NUMBER;
break;
case 101:
 this.$ = TipoDato.DOUBLE;
break;
case 102:
 this.$ = TipoDato.STRING;
break;
case 103:
 this.$ = TipoDato.BOOLEANO;
break;
case 104:
 this.$ = TipoDato.CHAR;
break;
case 105:
 this.$ = $$[$0]
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{1:[3]},{5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},o($Vh,[2,3]),{8:[1,39]},o($Vh,[2,5]),{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,43]},o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{76:[1,44]},{30:[1,45]},{34:46,36:[1,47]},{30:$Vi,39:[1,48],43:[1,50],44:[1,49]},{28:52,78:$Vj},{30:[1,54]},{30:[1,55]},{8:[1,56]},{30:[1,57]},{8:[1,58]},{26:59,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{21:78,36:[1,79]},o($VA,[2,100]),o($VA,[2,101]),o($VA,[2,102]),o($VA,[2,103]),o($VA,[2,104]),o($VA,[2,105]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),{26:80,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:81,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{8:[2,32],35:82,39:[1,84],42:[1,83]},o($VB,[2,28],{30:[1,86],37:[1,85]}),{26:87,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{44:[1,88]},{43:[1,89]},{26:92,30:$Vk,31:[1,91],36:$Vl,41:90,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{29:[1,93]},{4:94,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,79:[1,95],80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{26:96,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{33:98,36:[1,99],88:97,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},o($Vh,[2,19]),{26:100,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($Vh,[2,20]),{8:[1,101],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{26:117,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{30:[1,118]},o($VR,[2,42]),o($VR,[2,43]),o($VR,[2,44]),o($VR,[2,45]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),{26:119,30:$Vk,33:120,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{30:[1,121]},{30:[1,122]},{30:[1,123]},{30:[1,124]},o($VR,[2,54],{30:[1,125]}),{30:[1,126]},o($VR,[2,56]),{26:127,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($Vh,[2,23]),{30:$Vi},{8:[2,72],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,76:[1,128]},{31:[1,129],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{8:[2,24]},{36:[1,130]},{26:131,30:$Vk,36:$Vl,37:[1,133],40:[1,132],43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{38:[1,134]},{31:[1,136],33:138,90:135,91:137,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{8:[2,33],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{8:[2,70]},{8:[2,71]},{31:[1,139],42:$VS},{8:[1,141]},o($VT,[2,99],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),{30:[1,142]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,79:[1,143],80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},o($VU,[2,75]),{31:[1,144],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{8:[1,145]},{36:[1,146]},{39:[1,147]},{31:[1,148],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($Vh,[2,21]),{26:149,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:150,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:151,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:152,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:153,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:154,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{65:[1,155]},{26:156,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:157,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:158,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:159,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:160,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:161,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:162,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:163,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($VR,[2,34]),{26:164,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{31:[1,165],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{31:[1,166]},{26:167,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:168,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:169,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:170,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:92,30:$Vk,31:[1,172],36:$Vl,41:171,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{26:173,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o([8,31,38,42,49,50,64,76],[2,69],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),{77:[1,174]},{28:175,78:$Vj},o($VB,[2,27]),{8:[2,29],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{33:176,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{26:92,30:$Vk,36:$Vl,41:177,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{39:[1,178]},{31:[1,179],42:[1,180]},{28:181,78:$Vj},o($VV,[2,94]),{36:[1,182]},{8:[1,183]},{26:184,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($Vh,[2,97]),{26:185,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($VU,[2,74]),{78:[1,186]},{26:187,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{39:[1,188]},{26:189,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{28:190,78:$Vj},o($VW,[2,35],{45:$VE,46:$VF,47:$VG}),o($VW,[2,36],{45:$VE,46:$VF,47:$VG}),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,39]),{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,50:[1,191],64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{30:[1,192]},o($VX,[2,61],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o($VX,[2,62],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o($VX,[2,63],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o($VX,[2,64],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o($VX,[2,65],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o($VX,[2,66],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG}),o([8,31,38,42,49,50,64,72,73,76],[2,67],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO}),o([8,31,38,42,49,50,64,73,76],[2,68],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP}),{42:[1,193],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($VR,[2,49]),{26:194,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{31:[1,195],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{31:[1,196],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{31:[1,197],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{31:[1,198],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{31:[1,199],42:$VS},o($VR,[2,58]),{31:[1,200],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{8:[2,73]},o($Vh,[2,76],{81:[1,201]}),{37:[1,202]},{38:[1,203],42:$VS},{37:[1,205],40:[1,204]},{28:206,78:$Vj},{33:138,91:207,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},o($Vh,[2,92]),o($VV,[2,95]),o($Vh,[2,96]),o($VT,[2,98],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),{31:[1,208],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{83:209,84:210,85:$VY,86:$VZ},{8:[1,213],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{26:214,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{8:[2,86],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($Vh,[2,90]),{26:215,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{31:[1,216]},{26:217,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($V_,[2,59],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,57]),o($VR,[2,55]),{9:219,28:218,78:$Vj,80:$V8},{26:220,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{8:[2,31]},{33:221,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{26:92,30:$Vk,36:$Vl,41:222,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},o($Vh,[2,91]),o($VV,[2,93]),{8:[2,22]},{79:[1,223],84:224,85:$VY,86:$VZ},o($V$,[2,81]),{26:225,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{50:[1,226]},{36:[1,228],89:227},{8:[2,85],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($V_,[2,41],{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($VR,[2,60]),{31:[1,229],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($Vh,[2,77]),o($Vh,[2,78]),{38:[1,230],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{37:[1,231]},{38:[1,232],42:$VS},o($Vh,[2,79]),o($V$,[2,80]),{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,50:[1,233],64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{4:234,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},{31:[1,235]},{39:[1,238],43:[1,237],44:[1,236]},o($VR,[2,40]),{8:[2,30]},{26:239,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{8:[2,26]},{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,33:21,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg},o($V$,[2,83],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,33:21,6:38,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg}),{28:241,78:$Vj},{44:[1,242]},{43:[1,243]},{26:244,30:$Vk,36:$Vl,43:$Vm,48:$Vn,51:62,52:63,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,74:$Vz},{38:[1,245],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},o($V$,[2,82],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,33:21,6:38,23:$V0,24:$V1,25:$V2,27:$V3,29:$V4,32:$V5,36:$V6,75:$V7,80:$V8,82:$V9,87:$Va,92:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,97:$Vg}),o($Vh,[2,84]),{31:[2,87]},{31:[2,88]},{31:[2,89],43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,49:$VH,64:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ},{8:[2,25]}],
defaultActions: {37:[2,1],82:[2,24],88:[2,70],89:[2,71],174:[2,73],203:[2,31],208:[2,22],230:[2,30],232:[2,26],242:[2,87],243:[2,88],245:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../js/Expresion/Aritmetica");
    const {Relacional} = require("../js/Expresion/Relacionales");
    const {Logico} = require("../js/Expresion/Logicos");
    const {Primitivo} = require("../js/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../js/Expresion/Resultado");
    const {Print} = require("../js/instruccion/Print");
    const {Bloque} = require("../js/instruccion/Bloque");
    const {FN_IF} = require("../js/instruccion/Control/IF");
    const {AST} = require("../js/AST");
    const {Ternario} = require("../js/Expresion/Ternario");
    const {ToLower} = require("../js/Expresion/ToLower");
        const {Round} = require("../js/Expresion/Round");
        const {ToUpper} = require("../js/Expresion/ToUpper");
        const {ToString} = require("../js/Expresion/toString");
        const {VarDecla} = require("../js/instruccion/VarDecla");
        const {idValue} = require("../js/Expresion/idValue");
        const {Incremento} = require("../js/instruccion/Incremento");
        const {FN_DO_WHILE} = require("../js/instruccion/Control/DoWhile");
        const {FN_SWITCH} = require("../js/instruccion/Control/Switch");
        const {TypeOf} = require("../js/Expresion/TypeOf");
        const {FN_CASE} = require("../js/instruccion/Control/Case");
        const {Break} = require("../js/instruccion/Break");
        const {SetVar} = require("../js/instruccion/SetVar");
        const {FN_FOR} = require("../js/instruccion/Control/For");
        const {FN_WHILE} = require("../js/instruccion/Control/While");
        const {Continue} = require("../js/instruccion/Continue");
        const {Return} = require("../js/instruccion/Return");
        const {Function} = require("../js/instruccion/Function");
        const {CallVoid} = require("../js/instruccion/CallVoid");
        const {CallReturn} = require("../js/Expresion/CallReturn");
        const {Casteo} = require("../js/Expresion/casteos");
        const {execute} = require("../js/instruccion/execute");
        const {lenght} = require("../js/Expresion/lenght");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:   
break;
case 2:return 54;
break;
case 3:return 53;
break;
case 4:return 97;
break;
case 5:return 32;
break;
case 6:return 75;
break;
case 7:return 77;
break;
case 8:return 76;
break;
case 9:return 55;
break;
case 10:return 56;
break;
case 11:return 40;
break;
case 12:return 65;
break;
case 13:return 80;
break;
case 14:return 81;
break;
case 15:return 78;
break;
case 16:return 79;
break;
case 17:return 50;
break;
case 18:return 30;
break;
case 19:return 31;
break;
case 20:return 37;
break;
case 21:return 38;
break;
case 22:return 44;
break;
case 23:return 43;
break;
case 24:return 45;
break;
case 25:return 46;
break;
case 26:return 48;
break;
case 27:return 47;
break;
case 28:return 8;
break;
case 29:return 42;
break;
case 30:return 49;
break;
case 31:return 64;
break;
case 32:return 66;
break;
case 33:return 67;
break;
case 34:return 69;
break;
case 35:return 68;
break;
case 36:return 71;
break;
case 37:return 70;
break;
case 38:return 39;
break;
case 39:return 72;
break;
case 40:return 73;
break;
case 41:return 74;
break;
case 42:return 92;
break;
case 43:return 93;
break;
case 44:return 94;
break;
case 45:return 95;
break;
case 46:return 96;
break;
case 47:return 58;
break;
case 48:return 59;
break;
case 49:return 60;
break;
case 50:return 61;
break;
case 51:return 62;
break;
case 52:return 'DMAS';
break;
case 53:return 'DMENOS';
break;
case 54:return 27;
break;
case 55:return 29;
break;
case 56:return 82;
break;
case 57:return 85;
break;
case 58:return 86;
break;
case 59:return 23;
break;
case 60:return 24;
break;
case 61:return 25;
break;
case 62:return 87;
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 64: this.begin("character"); 
break;
case 65: return 63;
break;
case 66: return 63; 
break;
case 67: this.popState(); 
break;
case 68:return 36;
break;
case 69:return 5;
break;
case 70:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:void\b)/i,/^(?:EXECUTE\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:std::string\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:std::toString\b)/i,/^(?:typeof\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:"[^\"]*")/i,/^(?:['])/i,/^(?:\\x[0-9a-fA-F]{2})/i,/^(?:[^\\\'])/i,/^(?:')/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"character":{"rules":[65,66,67],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Lexico;
exports.Parser = Lexico.Parser;
exports.parse = function () { return Lexico.parse.apply(Lexico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}